# EasyLang Language Documentation
# This program generates a simple documentation for the EasyLang interpreter.
# Run it to see the full docs!

print "=== EasyLang Language Documentation ==="
print ""
print "EasyLang is a simple, interpreted scripting language designed for beginners."
print "It supports variables, arithmetic, conditionals, loops, input/output, and basic control flow."
print "The interpreter is written in C and parses EasyLang programs line-by-line."
print ""
print "1. BASIC SYNTAX"
print "   - Statements end with a newline or '.' (dot)."
print "   - Comments start with '#' and go to end of line."
print "   - Indentation is optional but recommended for readability."
print "   - Variables are case-insensitive (lowercased internally)."
print "   - Numbers: Integers or floats (e.g., 42, 3.14)."
print "   - Strings: Enclosed in double quotes (e.g., \"Hello\"). Escapes with \\."
print ""
print "2. KEYWORDS"
print "   - set: Assign values (e.g., set x to 5)."
print "   - print: Output values (e.g., print x)."
print "   - read: Input to variable (e.g., read y)."
print "   - if ... then ... else ... end: Conditionals."
print "   - while ... do ... end: Loops."
print "   - to: Used after 'set' for assignment."
print "   - and: Logical AND in conditions."
print ""
print "3. STATEMENTS"
print "   - Assignment: set <var> to <expr>"
print "     Example: set age to 25"
print "   - Output: print <expr>"
print "     Prints numbers or strings (with newline)."
print "   - Input: read <var>"
print "     Reads a number from stdin into <var>."
print "   - Bare expressions: Treated as print <expr>."
print ""
print "4. EXPRESSIONS"
print "   - Variables: Identifiers (letters, digits, _)."
print "   - Arithmetic: + (add/concat), - (subtract), * (multiply), / (divide), % (modulo)."
print "     Precedence: * / % > + - (use () for grouping)."
print "     + concatenates strings: \"Hello\" + \" World\" -> \"Hello World\""
print "   - Unary: -x (negation, e.g., set neg to -5)."
print "   - Comparisons: == (eq), != (neq), <, <=, >, >=."
print ""
print "5. CONTROL FLOW"
print "   - If-Then-Else:"
print "     if <cond> then"
print "         <statements>"
print "     else"
print "         <statements>"
print "     end"
print "     Example:"
print "     if age >= 18 then"
print "         print \"Adult\""
print "     else"
print "         print \"Minor\""
print "     end"
print ""
print "   - While Loop:"
print "     while <cond> do"
print "         <statements>"
print "     end"
print "     Conditions support 'and' for chaining."
print "     Example:"
print "     set i to 0"
print "     while i < 5 and i >= 0 do"
print "         print i"
print "         set i to i + 1"
print "     end"
print ""
print "6. EXAMPLES"
print ""
print "   Simple Calculator:"
print "   read a"
print "   read b"
print "   print a + b"
print ""
print "   Factorial (n=5):"
print "   set n to 5"
print "   set fact to 1"
print "   while n > 0 do"
print "       set fact to fact * n"
print "       set n to n - 1"
print "   end"
print "   print fact  # Output: 120"
print ""
print "   Prime Check:"
print "   read num"
print "   set is_prime to 1"
print "   if num <= 1 then"
print "       set is_prime to 0"
print "   else"
print "       set i to 2"
print "       while i * i <= num and is_prime == 1 do"
print "           if num % i == 0 then"
print "               set is_prime to 0"
print "           end"
print "           set i to i + 1"
print "       end"
print "   end"
print "   print num"
print "   if is_prime == 1 then"
print "       print \" is prime\""
print "   else"
print "       print \" is not prime\""
print "   end"
print ""
print "7. LIMITATIONS"
print "   - Variables are global doubles/strings."
print "   - No functions, arrays, or error handling beyond parse errors."
print "   - Strings are immutable; no advanced ops."
print "   - Input assumes valid numbers."
print ""
print "=== End of Documentation ==="
print "For source: See easylang.c (recursive descent parser in C)."